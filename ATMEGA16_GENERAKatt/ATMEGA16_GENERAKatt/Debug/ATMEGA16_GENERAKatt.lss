
ATMEGA16_GENERAKatt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000524  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  00800060  00000524  000005b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800154  00800154  000006ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001102  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080b  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f5  00000000  00000000  00002075  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  0000266c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fd  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000810  00000000  00000000  00002b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000331d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 35       	cpi	r26, 0x54	; 84
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e5       	ldi	r26, 0x54	; 84
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  8a:	0c 94 90 02 	jmp	0x520	; 0x520 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_init>:

unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
	return(UDR);			/* Return the byte*/
}
  92:	2a b1       	in	r18, 0x0a	; 10
  94:	28 61       	ori	r18, 0x18	; 24
  96:	2a b9       	out	0x0a, r18	; 10
  98:	20 b5       	in	r18, 0x20	; 32
  9a:	26 68       	ori	r18, 0x86	; 134
  9c:	20 bd       	out	0x20, r18	; 32
  9e:	dc 01       	movw	r26, r24
  a0:	cb 01       	movw	r24, r22
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	aa 1f       	adc	r26, r26
  a8:	bb 1f       	adc	r27, r27
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	aa 1f       	adc	r26, r26
  b0:	bb 1f       	adc	r27, r27
  b2:	9c 01       	movw	r18, r24
  b4:	ad 01       	movw	r20, r26
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	44 1f       	adc	r20, r20
  bc:	55 1f       	adc	r21, r21
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	44 1f       	adc	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	60 e4       	ldi	r22, 0x40	; 64
  c8:	72 e4       	ldi	r23, 0x42	; 66
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 39 02 	call	0x472	; 0x472 <__udivmodsi4>
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	82 0f       	add	r24, r18
  d6:	89 b9       	out	0x09, r24	; 9
  d8:	da 01       	movw	r26, r20
  da:	c9 01       	movw	r24, r18
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	a1 09       	sbc	r26, r1
  e0:	b1 09       	sbc	r27, r1
  e2:	89 2f       	mov	r24, r25
  e4:	9a 2f       	mov	r25, r26
  e6:	ab 2f       	mov	r26, r27
  e8:	bb 27       	eor	r27, r27
  ea:	80 bd       	out	0x20, r24	; 32
  ec:	08 95       	ret

000000ee <UART_TxChar>:

void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
  ee:	5d 9b       	sbis	0x0b, 5	; 11
  f0:	fe cf       	rjmp	.-4      	; 0xee <UART_TxChar>
	UDR = ch ;
  f2:	8c b9       	out	0x0c, r24	; 12
  f4:	08 95       	ret

000000f6 <UART_SendString>:
}

void UART_SendString(char *str)
{
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	fc 01       	movw	r30, r24
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
  fe:	80 81       	ld	r24, Z
 100:	88 23       	and	r24, r24
 102:	59 f0       	breq	.+22     	; 0x11a <UART_SendString+0x24>
 104:	8f 01       	movw	r16, r30
 106:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_TxChar(str[j]);
 108:	0e 94 77 00 	call	0xee	; 0xee <UART_TxChar>
		j++;
 10c:	cf 5f       	subi	r28, 0xFF	; 255

void UART_SendString(char *str)
{
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
 10e:	f8 01       	movw	r30, r16
 110:	ec 0f       	add	r30, r28
 112:	f1 1d       	adc	r31, r1
 114:	80 81       	ld	r24, Z
 116:	81 11       	cpse	r24, r1
 118:	f7 cf       	rjmp	.-18     	; 0x108 <UART_SendString+0x12>
	{
		UART_TxChar(str[j]);
		j++;
	}
}
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <ADC_Init>:

void ADC_Init()
{
	DDRA=0x0;			/* Make ADC port as input */
 122:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;			/* Enable ADC, fr/128  */
 124:	87 e8       	ldi	r24, 0x87	; 135
 126:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */
 128:	80 e4       	ldi	r24, 0x40	; 64
 12a:	87 b9       	out	0x07, r24	; 7
 12c:	08 95       	ret

0000012e <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
 12e:	97 b1       	in	r25, 0x07	; 7
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	98 2b       	or	r25, r24
 134:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
 136:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
 138:	34 9b       	sbis	0x06, 4	; 6
 13a:	fe cf       	rjmp	.-4      	; 0x138 <ADC_Read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <ADC_Read+0x10>
 142:	00 00       	nop
	
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
 144:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
 146:	85 b1       	in	r24, 0x05	; 5
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	98 2f       	mov	r25, r24
 14c:	88 27       	eor	r24, r24
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}
 14e:	82 0f       	add	r24, r18
 150:	91 1d       	adc	r25, r1
 152:	08 95       	ret

00000154 <main>:

char arr1[10];
int as,L;
int main(void)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	2a 97       	sbiw	r28, 0x0a	; 10
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	f8 94       	cli
 162:	de bf       	out	0x3e, r29	; 62
 164:	0f be       	out	0x3f, r0	; 63
 166:	cd bf       	out	0x3d, r28	; 61
	/* Replace with your application code */
	ADC_Init();								// ADC initialization
 168:	0e 94 91 00 	call	0x122	; 0x122 <ADC_Init>
	UART_init(4800);
 16c:	60 ec       	ldi	r22, 0xC0	; 192
 16e:	72 e1       	ldi	r23, 0x12	; 18
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 49 00 	call	0x92	; 0x92 <UART_init>
	int attend=0;
	int flag=0;
	char arr[10];
	//char update[40] = {"GET /update?key=DGXX4163Z7XEXE2I&field3="};
	DDRB = 0B00000000;
 178:	17 ba       	out	0x17, r1	; 23
	UART_SendString("AT\r\n");
 17a:	80 e6       	ldi	r24, 0x60	; 96
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	2f e9       	ldi	r18, 0x9F	; 159
 184:	86 e8       	ldi	r24, 0x86	; 134
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x34>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x3e>
 192:	00 00       	nop
	_delay_ms(500);
	//UART_SendString("AT+CWMODE=3\r\n");
	//_delay_ms(700);
//	UART_SendString("AT+CWJAP=\"Verma\",\"12345678\"\r\n");
//	_delay_ms(5000);
	UART_SendString("AT+CIPMUX=1\r\n");
 194:	85 e6       	ldi	r24, 0x65	; 101
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
 19c:	2f e3       	ldi	r18, 0x3F	; 63
 19e:	8d e0       	ldi	r24, 0x0D	; 13
 1a0:	93 e0       	ldi	r25, 0x03	; 3
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <main+0x4e>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x58>
 1ac:	00 00       	nop
	_delay_ms(1000);
	UART_SendString("AT+CIPSERVER=1,80\r\n");
 1ae:	83 e7       	ldi	r24, 0x73	; 115
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
 1b6:	2f e7       	ldi	r18, 0x7F	; 127
 1b8:	8a e1       	ldi	r24, 0x1A	; 26
 1ba:	96 e0       	ldi	r25, 0x06	; 6
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x68>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x72>
 1c6:	00 00       	nop
{
	/* Replace with your application code */
	ADC_Init();								// ADC initialization
	UART_init(4800);
	int attend=0;
	int flag=0;
 1c8:	a1 2c       	mov	r10, r1
 1ca:	b1 2c       	mov	r11, r1
int main(void)
{
	/* Replace with your application code */
	ADC_Init();								// ADC initialization
	UART_init(4800);
	int attend=0;
 1cc:	c1 2c       	mov	r12, r1
 1ce:	d1 2c       	mov	r13, r1
				//_delay_ms(1000);
			}
		}
		else if(as<200&&flag==1)
		{
			flag=0;
 1d0:	61 2c       	mov	r6, r1
 1d2:	71 2c       	mov	r7, r1
		//UART_SendString("\r\n");				// (\r --> for new row)(\n --> for new line) both to press enter
		//_delay_ms(1000);
		PORTB=0B00000000;				// delay of one second
		if(as>=200&&flag==0)
		{
			flag=1;
 1d4:	88 24       	eor	r8, r8
 1d6:	83 94       	inc	r8
 1d8:	91 2c       	mov	r9, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1da:	8e 01       	movw	r16, r28
 1dc:	0f 5f       	subi	r16, 0xFF	; 255
 1de:	1f 4f       	sbci	r17, 0xFF	; 255
	UART_SendString("AT+CIPSERVER=1,80\r\n");
	_delay_ms(2000);
	
	while (1)
	{
		as=ADC_Read(0);
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 97 00 	call	0x12e	; 0x12e <ADC_Read>
 1e6:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <as+0x1>
 1ea:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <as>
		//itoa(as,arr1,10);
		//UART_SendString(arr1);					//Now transmitting the decimal value from controller
		//UART_SendString("\r\n");				// (\r --> for new row)(\n --> for new line) both to press enter
		//_delay_ms(1000);
		PORTB=0B00000000;				// delay of one second
 1ee:	18 ba       	out	0x18, r1	; 24
		if(as>=200&&flag==0)
 1f0:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <as>
 1f4:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <as+0x1>
 1f8:	88 3c       	cpi	r24, 0xC8	; 200
 1fa:	91 05       	cpc	r25, r1
 1fc:	bc f1       	brlt	.+110    	; 0x26c <main+0x118>
 1fe:	a1 14       	cp	r10, r1
 200:	b1 04       	cpc	r11, r1
 202:	09 f0       	breq	.+2      	; 0x206 <main+0xb2>
 204:	69 c0       	rjmp	.+210    	; 0x2d8 <main+0x184>
 206:	0f 2e       	mov	r0, r31
 208:	f3 e0       	ldi	r31, 0x03	; 3
 20a:	ef 2e       	mov	r14, r31
 20c:	f1 2c       	mov	r15, r1
 20e:	f0 2d       	mov	r31, r0
		{
			flag=1;
			
			for(int i=0;i<3;i++){
				UART_SendString("AT+CIPSTART=4,\"TCP\",\"184.106.153.149\",80\r\n");
 210:	87 e8       	ldi	r24, 0x87	; 135
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
 218:	2f e3       	ldi	r18, 0x3F	; 63
 21a:	8d e0       	ldi	r24, 0x0D	; 13
 21c:	93 e0       	ldi	r25, 0x03	; 3
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0xca>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0xd4>
 228:	00 00       	nop
				_delay_ms(1000);
				UART_SendString("AT+CIPSEND=4,43\r\n");
 22a:	82 eb       	ldi	r24, 0xB2	; 178
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
 232:	2f e5       	ldi	r18, 0x5F	; 95
 234:	8a ee       	ldi	r24, 0xEA	; 234
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0xe4>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0xee>
 242:	00 00       	nop
				_delay_ms(300);
				UART_SendString("GET /update?key=DGXX4163Z7XEXE2I&field2=1\r\n");
 244:	84 ec       	ldi	r24, 0xC4	; 196
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
 24c:	2f e3       	ldi	r18, 0x3F	; 63
 24e:	8d e0       	ldi	r24, 0x0D	; 13
 250:	93 e0       	ldi	r25, 0x03	; 3
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0xfe>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x108>
 25c:	00 00       	nop
 25e:	21 e0       	ldi	r18, 0x01	; 1
 260:	e2 1a       	sub	r14, r18
 262:	f1 08       	sbc	r15, r1
		PORTB=0B00000000;				// delay of one second
		if(as>=200&&flag==0)
		{
			flag=1;
			
			for(int i=0;i<3;i++){
 264:	a9 f6       	brne	.-86     	; 0x210 <main+0xbc>
		//UART_SendString("\r\n");				// (\r --> for new row)(\n --> for new line) both to press enter
		//_delay_ms(1000);
		PORTB=0B00000000;				// delay of one second
		if(as>=200&&flag==0)
		{
			flag=1;
 266:	a8 2c       	mov	r10, r8
 268:	b9 2c       	mov	r11, r9
 26a:	36 c0       	rjmp	.+108    	; 0x2d8 <main+0x184>
				_delay_ms(1000);
				//UART_SendString("AT+CIPCLOSE=4\r\n");
				//_delay_ms(1000);
			}
		}
		else if(as<200&&flag==1)
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	a8 16       	cp	r10, r24
 270:	b1 04       	cpc	r11, r1
 272:	91 f5       	brne	.+100    	; 0x2d8 <main+0x184>
 274:	0f 2e       	mov	r0, r31
 276:	f3 e0       	ldi	r31, 0x03	; 3
 278:	ef 2e       	mov	r14, r31
 27a:	f1 2c       	mov	r15, r1
 27c:	f0 2d       	mov	r31, r0
		{
			flag=0;
			
			for(int i=0;i<3;i++){
				UART_SendString("AT+CIPSTART=4,\"TCP\",\"184.106.153.149\",80\r\n");
 27e:	87 e8       	ldi	r24, 0x87	; 135
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
 286:	9f e3       	ldi	r25, 0x3F	; 63
 288:	2d e0       	ldi	r18, 0x0D	; 13
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	91 50       	subi	r25, 0x01	; 1
 28e:	20 40       	sbci	r18, 0x00	; 0
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x138>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x142>
 296:	00 00       	nop
				_delay_ms(1000);
				UART_SendString("AT+CIPSEND=4,43\r\n");
 298:	82 eb       	ldi	r24, 0xB2	; 178
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
 2a0:	9f e5       	ldi	r25, 0x5F	; 95
 2a2:	2a ee       	ldi	r18, 0xEA	; 234
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	91 50       	subi	r25, 0x01	; 1
 2a8:	20 40       	sbci	r18, 0x00	; 0
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0x152>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0x15c>
 2b0:	00 00       	nop
				_delay_ms(300);
				UART_SendString("GET /update?key=DGXX4163Z7XEXE2I&field2=0\r\n");
 2b2:	80 ef       	ldi	r24, 0xF0	; 240
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
 2ba:	9f e3       	ldi	r25, 0x3F	; 63
 2bc:	2d e0       	ldi	r18, 0x0D	; 13
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	91 50       	subi	r25, 0x01	; 1
 2c2:	20 40       	sbci	r18, 0x00	; 0
 2c4:	80 40       	sbci	r24, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x16c>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x176>
 2ca:	00 00       	nop
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	e9 1a       	sub	r14, r25
 2d0:	f1 08       	sbc	r15, r1
		}
		else if(as<200&&flag==1)
		{
			flag=0;
			
			for(int i=0;i<3;i++){
 2d2:	a9 f6       	brne	.-86     	; 0x27e <main+0x12a>
				//_delay_ms(1000);
			}
		}
		else if(as<200&&flag==1)
		{
			flag=0;
 2d4:	a6 2c       	mov	r10, r6
 2d6:	b7 2c       	mov	r11, r7
				//UART_SendString("AT+CIPCLOSE=4\r\n");
				//_delay_ms(1000);
			}
		}
		
		if((PINB&0x01)==0x01){
 2d8:	b0 9b       	sbis	0x16, 0	; 22
 2da:	64 c0       	rjmp	.+200    	; 0x3a4 <main+0x250>
			while(1){
				if((PINB&0B00000010)==0B00000010){
 2dc:	b1 9b       	sbis	0x16, 1	; 22
 2de:	fe cf       	rjmp	.-4      	; 0x2dc <main+0x188>
					attend++;
 2e0:	2f ef       	ldi	r18, 0xFF	; 255
 2e2:	c2 1a       	sub	r12, r18
 2e4:	d2 0a       	sbc	r13, r18
 2e6:	4a e0       	ldi	r20, 0x0A	; 10
 2e8:	b8 01       	movw	r22, r16
 2ea:	c6 01       	movw	r24, r12
 2ec:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__itoa_ncheck>
					itoa(attend,arr,10);
					L = strlen(arr)+42;
 2f0:	f8 01       	movw	r30, r16
 2f2:	01 90       	ld	r0, Z+
 2f4:	00 20       	and	r0, r0
 2f6:	e9 f7       	brne	.-6      	; 0x2f2 <main+0x19e>
 2f8:	cf 01       	movw	r24, r30
 2fa:	80 1b       	sub	r24, r16
 2fc:	91 0b       	sbc	r25, r17
 2fe:	89 96       	adiw	r24, 0x29	; 41
 300:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <L+0x1>
 304:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <L>
 308:	4a e0       	ldi	r20, 0x0A	; 10
 30a:	64 e5       	ldi	r22, 0x54	; 84
 30c:	71 e0       	ldi	r23, 0x01	; 1
 30e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__itoa_ncheck>
 312:	0f 2e       	mov	r0, r31
 314:	f3 e0       	ldi	r31, 0x03	; 3
 316:	ef 2e       	mov	r14, r31
 318:	f1 2c       	mov	r15, r1
 31a:	f0 2d       	mov	r31, r0
					itoa(L,arr1,10);
					//UART_SendString(arr1);
					//UART_SendString("\r\n");
					for(int i=0;i<3;i++)
					{
						UART_SendString("AT+CIPSTART=4,\"TCP\",\"184.106.153.149\",80\r\n");
 31c:	87 e8       	ldi	r24, 0x87	; 135
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
 324:	8f e3       	ldi	r24, 0x3F	; 63
 326:	9d e0       	ldi	r25, 0x0D	; 13
 328:	23 e0       	ldi	r18, 0x03	; 3
 32a:	81 50       	subi	r24, 0x01	; 1
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	20 40       	sbci	r18, 0x00	; 0
 330:	e1 f7       	brne	.-8      	; 0x32a <main+0x1d6>
 332:	00 c0       	rjmp	.+0      	; 0x334 <main+0x1e0>
 334:	00 00       	nop
						_delay_ms(1000);
						UART_SendString("AT+CIPSEND=4,");
 336:	8c e1       	ldi	r24, 0x1C	; 28
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
						UART_SendString(arr1);
 33e:	84 e5       	ldi	r24, 0x54	; 84
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
						UART_SendString("\r\n");
 346:	8f ea       	ldi	r24, 0xAF	; 175
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
 34e:	8f e5       	ldi	r24, 0x5F	; 95
 350:	9a ee       	ldi	r25, 0xEA	; 234
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	81 50       	subi	r24, 0x01	; 1
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	20 40       	sbci	r18, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <main+0x200>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x20a>
 35e:	00 00       	nop
						_delay_ms(300);
						UART_SendString("GET /update?key=DGXX4163Z7XEXE2I&field4=");
 360:	8a e2       	ldi	r24, 0x2A	; 42
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
						UART_SendString(arr);
 368:	c8 01       	movw	r24, r16
 36a:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
						UART_SendString("\r\n");
 36e:	8f ea       	ldi	r24, 0xAF	; 175
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
 376:	8f e3       	ldi	r24, 0x3F	; 63
 378:	9d e0       	ldi	r25, 0x0D	; 13
 37a:	23 e0       	ldi	r18, 0x03	; 3
 37c:	81 50       	subi	r24, 0x01	; 1
 37e:	90 40       	sbci	r25, 0x00	; 0
 380:	20 40       	sbci	r18, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <main+0x228>
 384:	00 c0       	rjmp	.+0      	; 0x386 <main+0x232>
 386:	00 00       	nop
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	e8 1a       	sub	r14, r24
 38c:	f1 08       	sbc	r15, r1
					itoa(attend,arr,10);
					L = strlen(arr)+42;
					itoa(L,arr1,10);
					//UART_SendString(arr1);
					//UART_SendString("\r\n");
					for(int i=0;i<3;i++)
 38e:	31 f6       	brne	.-116    	; 0x31c <main+0x1c8>
 390:	9f e9       	ldi	r25, 0x9F	; 159
 392:	26 e8       	ldi	r18, 0x86	; 134
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	91 50       	subi	r25, 0x01	; 1
 398:	20 40       	sbci	r18, 0x00	; 0
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <main+0x242>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0x24c>
 3a0:	00 00       	nop
					}
					break;
				}
			}
			_delay_ms(500);
			PORTB=0B00000000;
 3a2:	18 ba       	out	0x18, r1	; 24
		}
		if((PINB&0B00000010)==0B00000010){
 3a4:	b1 9b       	sbis	0x16, 1	; 22
 3a6:	1c cf       	rjmp	.-456    	; 0x1e0 <main+0x8c>
			while(1){
				if((PINB&0x01)==0x01){
 3a8:	b0 9b       	sbis	0x16, 0	; 22
 3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <main+0x254>
					attend--;
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	c9 1a       	sub	r12, r25
 3b0:	d1 08       	sbc	r13, r1
 3b2:	4a e0       	ldi	r20, 0x0A	; 10
 3b4:	b8 01       	movw	r22, r16
 3b6:	c6 01       	movw	r24, r12
 3b8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__itoa_ncheck>
					itoa(attend,arr,10);
					L = strlen(arr)+42;
 3bc:	f8 01       	movw	r30, r16
 3be:	01 90       	ld	r0, Z+
 3c0:	00 20       	and	r0, r0
 3c2:	e9 f7       	brne	.-6      	; 0x3be <main+0x26a>
 3c4:	cf 01       	movw	r24, r30
 3c6:	80 1b       	sub	r24, r16
 3c8:	91 0b       	sbc	r25, r17
 3ca:	89 96       	adiw	r24, 0x29	; 41
 3cc:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <L+0x1>
 3d0:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <L>
 3d4:	4a e0       	ldi	r20, 0x0A	; 10
 3d6:	64 e5       	ldi	r22, 0x54	; 84
 3d8:	71 e0       	ldi	r23, 0x01	; 1
 3da:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__itoa_ncheck>
 3de:	0f 2e       	mov	r0, r31
 3e0:	f3 e0       	ldi	r31, 0x03	; 3
 3e2:	ef 2e       	mov	r14, r31
 3e4:	f1 2c       	mov	r15, r1
 3e6:	f0 2d       	mov	r31, r0
					itoa(L,arr1,10);
					//UART_SendString(arr1);
					//UART_SendString("\r\n");
					for(int i=0;i<3;i++)
					{
						UART_SendString("AT+CIPSTART=4,\"TCP\",\"184.106.153.149\",80\r\n");
 3e8:	87 e8       	ldi	r24, 0x87	; 135
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
 3f0:	2f e3       	ldi	r18, 0x3F	; 63
 3f2:	8d e0       	ldi	r24, 0x0D	; 13
 3f4:	93 e0       	ldi	r25, 0x03	; 3
 3f6:	21 50       	subi	r18, 0x01	; 1
 3f8:	80 40       	sbci	r24, 0x00	; 0
 3fa:	90 40       	sbci	r25, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0x2a2>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	00 00       	nop
						_delay_ms(1000);
						UART_SendString("AT+CIPSEND=4,");
 402:	8c e1       	ldi	r24, 0x1C	; 28
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
						UART_SendString(arr1);
 40a:	84 e5       	ldi	r24, 0x54	; 84
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
						UART_SendString("\r\n");
 412:	8f ea       	ldi	r24, 0xAF	; 175
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
 41a:	2f e5       	ldi	r18, 0x5F	; 95
 41c:	8a ee       	ldi	r24, 0xEA	; 234
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	21 50       	subi	r18, 0x01	; 1
 422:	80 40       	sbci	r24, 0x00	; 0
 424:	90 40       	sbci	r25, 0x00	; 0
 426:	e1 f7       	brne	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
						_delay_ms(300);
						UART_SendString("GET /update?key=DGXX4163Z7XEXE2I&field4=");
 42c:	8a e2       	ldi	r24, 0x2A	; 42
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
						UART_SendString(arr);
 434:	c8 01       	movw	r24, r16
 436:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
						UART_SendString("\r\n");
 43a:	8f ea       	ldi	r24, 0xAF	; 175
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_SendString>
 442:	2f e3       	ldi	r18, 0x3F	; 63
 444:	8d e0       	ldi	r24, 0x0D	; 13
 446:	93 e0       	ldi	r25, 0x03	; 3
 448:	21 50       	subi	r18, 0x01	; 1
 44a:	80 40       	sbci	r24, 0x00	; 0
 44c:	90 40       	sbci	r25, 0x00	; 0
 44e:	e1 f7       	brne	.-8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 452:	00 00       	nop
 454:	21 e0       	ldi	r18, 0x01	; 1
 456:	e2 1a       	sub	r14, r18
 458:	f1 08       	sbc	r15, r1
					itoa(attend,arr,10);
					L = strlen(arr)+42;
					itoa(L,arr1,10);
					//UART_SendString(arr1);
					//UART_SendString("\r\n");
					for(int i=0;i<3;i++)
 45a:	31 f6       	brne	.-116    	; 0x3e8 <main+0x294>
 45c:	8f e9       	ldi	r24, 0x9F	; 159
 45e:	96 e8       	ldi	r25, 0x86	; 134
 460:	21 e0       	ldi	r18, 0x01	; 1
 462:	81 50       	subi	r24, 0x01	; 1
 464:	90 40       	sbci	r25, 0x00	; 0
 466:	20 40       	sbci	r18, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <__stack+0x3>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__stack+0xd>
 46c:	00 00       	nop
					}
					break;
				}
			}
			_delay_ms(500);
			PORTB=0B00000000;
 46e:	18 ba       	out	0x18, r1	; 24
 470:	b7 ce       	rjmp	.-658    	; 0x1e0 <main+0x8c>

00000472 <__udivmodsi4>:
 472:	a1 e2       	ldi	r26, 0x21	; 33
 474:	1a 2e       	mov	r1, r26
 476:	aa 1b       	sub	r26, r26
 478:	bb 1b       	sub	r27, r27
 47a:	fd 01       	movw	r30, r26
 47c:	0d c0       	rjmp	.+26     	; 0x498 <__udivmodsi4_ep>

0000047e <__udivmodsi4_loop>:
 47e:	aa 1f       	adc	r26, r26
 480:	bb 1f       	adc	r27, r27
 482:	ee 1f       	adc	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	a2 17       	cp	r26, r18
 488:	b3 07       	cpc	r27, r19
 48a:	e4 07       	cpc	r30, r20
 48c:	f5 07       	cpc	r31, r21
 48e:	20 f0       	brcs	.+8      	; 0x498 <__udivmodsi4_ep>
 490:	a2 1b       	sub	r26, r18
 492:	b3 0b       	sbc	r27, r19
 494:	e4 0b       	sbc	r30, r20
 496:	f5 0b       	sbc	r31, r21

00000498 <__udivmodsi4_ep>:
 498:	66 1f       	adc	r22, r22
 49a:	77 1f       	adc	r23, r23
 49c:	88 1f       	adc	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	1a 94       	dec	r1
 4a2:	69 f7       	brne	.-38     	; 0x47e <__udivmodsi4_loop>
 4a4:	60 95       	com	r22
 4a6:	70 95       	com	r23
 4a8:	80 95       	com	r24
 4aa:	90 95       	com	r25
 4ac:	9b 01       	movw	r18, r22
 4ae:	ac 01       	movw	r20, r24
 4b0:	bd 01       	movw	r22, r26
 4b2:	cf 01       	movw	r24, r30
 4b4:	08 95       	ret

000004b6 <__itoa_ncheck>:
 4b6:	bb 27       	eor	r27, r27
 4b8:	4a 30       	cpi	r20, 0x0A	; 10
 4ba:	31 f4       	brne	.+12     	; 0x4c8 <__itoa_ncheck+0x12>
 4bc:	99 23       	and	r25, r25
 4be:	22 f4       	brpl	.+8      	; 0x4c8 <__itoa_ncheck+0x12>
 4c0:	bd e2       	ldi	r27, 0x2D	; 45
 4c2:	90 95       	com	r25
 4c4:	81 95       	neg	r24
 4c6:	9f 4f       	sbci	r25, 0xFF	; 255
 4c8:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__utoa_common>

000004cc <__utoa_ncheck>:
 4cc:	bb 27       	eor	r27, r27

000004ce <__utoa_common>:
 4ce:	fb 01       	movw	r30, r22
 4d0:	55 27       	eor	r21, r21
 4d2:	aa 27       	eor	r26, r26
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	aa 1f       	adc	r26, r26
 4da:	a4 17       	cp	r26, r20
 4dc:	10 f0       	brcs	.+4      	; 0x4e2 <__utoa_common+0x14>
 4de:	a4 1b       	sub	r26, r20
 4e0:	83 95       	inc	r24
 4e2:	50 51       	subi	r21, 0x10	; 16
 4e4:	b9 f7       	brne	.-18     	; 0x4d4 <__utoa_common+0x6>
 4e6:	a0 5d       	subi	r26, 0xD0	; 208
 4e8:	aa 33       	cpi	r26, 0x3A	; 58
 4ea:	08 f0       	brcs	.+2      	; 0x4ee <__utoa_common+0x20>
 4ec:	a9 5d       	subi	r26, 0xD9	; 217
 4ee:	a1 93       	st	Z+, r26
 4f0:	00 97       	sbiw	r24, 0x00	; 0
 4f2:	79 f7       	brne	.-34     	; 0x4d2 <__utoa_common+0x4>
 4f4:	b1 11       	cpse	r27, r1
 4f6:	b1 93       	st	Z+, r27
 4f8:	11 92       	st	Z+, r1
 4fa:	cb 01       	movw	r24, r22
 4fc:	0c 94 80 02 	jmp	0x500	; 0x500 <strrev>

00000500 <strrev>:
 500:	dc 01       	movw	r26, r24
 502:	fc 01       	movw	r30, r24
 504:	67 2f       	mov	r22, r23
 506:	71 91       	ld	r23, Z+
 508:	77 23       	and	r23, r23
 50a:	e1 f7       	brne	.-8      	; 0x504 <strrev+0x4>
 50c:	32 97       	sbiw	r30, 0x02	; 2
 50e:	04 c0       	rjmp	.+8      	; 0x518 <strrev+0x18>
 510:	7c 91       	ld	r23, X
 512:	6d 93       	st	X+, r22
 514:	70 83       	st	Z, r23
 516:	62 91       	ld	r22, -Z
 518:	ae 17       	cp	r26, r30
 51a:	bf 07       	cpc	r27, r31
 51c:	c8 f3       	brcs	.-14     	; 0x510 <strrev+0x10>
 51e:	08 95       	ret

00000520 <_exit>:
 520:	f8 94       	cli

00000522 <__stop_program>:
 522:	ff cf       	rjmp	.-2      	; 0x522 <__stop_program>
